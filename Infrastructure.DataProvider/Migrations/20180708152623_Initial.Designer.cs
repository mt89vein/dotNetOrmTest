// <auto-generated />
using System;
using Infrastructure.DataProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataProviced.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180708152623_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataProvider.DataTransferObjects.DocumentDto", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("DocumentType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("DataProvider.DataTransferObjects.OtherDocumentDto", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("TestName");

                    b.HasKey("Id");

                    b.ToTable("OtherDocument");
                });

            modelBuilder.Entity("DataProvider.DataTransferObjects.OtherDocumentItemDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("OtherDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("OtherDocumentId");

                    b.ToTable("OtherDocumentItem");
                });

            modelBuilder.Entity("DataProvider.DataTransferObjects.OtherDocumentPaymentDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OtherDocumentId");

                    b.Property<string>("Total");

                    b.HasKey("Id");

                    b.HasIndex("OtherDocumentId");

                    b.ToTable("OtherDocumentPayment");
                });

            modelBuilder.Entity("DataProvider.DataTransferObjects.SecondDocumentDto", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<string>("DocumentSigner");

                    b.HasKey("Id");

                    b.ToTable("SecondDocument");
                });

            modelBuilder.Entity("DataProvider.DataTransferObjects.OtherDocumentDto", b =>
                {
                    b.HasOne("DataProvider.DataTransferObjects.DocumentDto", "DocumentDto")
                        .WithOne("OtherDocumentDto")
                        .HasForeignKey("DataProvider.DataTransferObjects.OtherDocumentDto", "Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("Domain.PublicationEvent", "PublicationEvent", b1 =>
                        {
                            b1.Property<int?>("OtherDocumentDtoId");

                            b1.Property<DateTime?>("Date");

                            b1.Property<int?>("UserId");

                            b1.ToTable("OtherDocument");

                            b1.HasOne("DataProvider.DataTransferObjects.OtherDocumentDto")
                                .WithOne("PublicationEvent")
                                .HasForeignKey("Domain.PublicationEvent", "OtherDocumentDtoId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DataProvider.DataTransferObjects.OtherDocumentItemDto", b =>
                {
                    b.HasOne("DataProvider.DataTransferObjects.OtherDocumentDto", "OtherDocumentDto")
                        .WithMany("OtherDocumentItemDtos")
                        .HasForeignKey("OtherDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataProvider.DataTransferObjects.OtherDocumentPaymentDto", b =>
                {
                    b.HasOne("DataProvider.DataTransferObjects.OtherDocumentDto", "OtherDocumentDto")
                        .WithMany("OtherDocumentPaymentDtos")
                        .HasForeignKey("OtherDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataProvider.DataTransferObjects.SecondDocumentDto", b =>
                {
                    b.HasOne("DataProvider.DataTransferObjects.DocumentDto", "DocumentDto")
                        .WithOne("SecondDocumentDto")
                        .HasForeignKey("DataProvider.DataTransferObjects.SecondDocumentDto", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
