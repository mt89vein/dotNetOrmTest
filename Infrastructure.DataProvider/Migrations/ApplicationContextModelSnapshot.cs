// <auto-generated />
using System;
using Infrastructure.DataProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.DataProvider.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Infrastructure.DataProvider.AttachmentDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<int?>("DocumentId");

                    b.Property<string>("Path");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("Attachment");

                    b.HasData(
                        new { Id = 1, Deleted = false, DocumentId = 1, Path = "some/path" },
                        new { Id = 2, Deleted = false, DocumentId = 1, Path = "some/another/path" },
                        new { Id = 3, Deleted = true, DocumentId = 1, Path = "some/either/path" }
                    );
                });

            modelBuilder.Entity("Infrastructure.DataProvider.DocumentDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<int>("DocumentType");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Document");

                    b.HasData(
                        new { Id = 1, Deleted = false, DocumentType = 0, Name = "Первый документ первого типа" },
                        new { Id = 2, Deleted = true, DocumentType = 0, Name = "Второй удаленный документ первого типа" },
                        new { Id = 3, Deleted = false, DocumentType = 0, Name = "Третий документ первого типа" },
                        new { Id = 4, Deleted = false, DocumentType = 0, Name = "Четвертый документ первого типа" }
                    );
                });

            modelBuilder.Entity("Infrastructure.DataProvider.OtherDocumentDto", b =>
                {
                    b.Property<int>("Id");

                    b.Property<bool>("Deleted");

                    b.Property<string>("TestName");

                    b.HasKey("Id");

                    b.ToTable("OtherDocument");

                    b.HasData(
                        new { Id = 1, Deleted = false, TestName = "Первый документ первого типа" },
                        new { Id = 2, Deleted = true, TestName = "Второй документ первого типа" },
                        new { Id = 3, Deleted = false, TestName = "Третий удаленный документ первого типа" },
                        new { Id = 4, Deleted = false, TestName = "Четвертый документ первого типа" }
                    );
                });

            modelBuilder.Entity("Infrastructure.DataProvider.OtherDocumentItemDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<string>("Name");

                    b.Property<int>("OtherDocumentId");

                    b.HasKey("Id");

                    b.HasIndex("OtherDocumentId");

                    b.ToTable("OtherDocumentItem");

                    b.HasData(
                        new { Id = 1, Deleted = false, Name = "item 1 1", OtherDocumentId = 1 },
                        new { Id = 2, Deleted = true, Name = "item 1 2", OtherDocumentId = 1 },
                        new { Id = 3, Deleted = false, Name = "item 2 1", OtherDocumentId = 2 },
                        new { Id = 4, Deleted = true, Name = "item 2 2", OtherDocumentId = 2 },
                        new { Id = 5, Deleted = false, Name = "item 3 1", OtherDocumentId = 3 },
                        new { Id = 6, Deleted = true, Name = "item 3 2", OtherDocumentId = 3 },
                        new { Id = 7, Deleted = false, Name = "item 4 1", OtherDocumentId = 4 },
                        new { Id = 8, Deleted = true, Name = "item 4 2", OtherDocumentId = 4 }
                    );
                });

            modelBuilder.Entity("Infrastructure.DataProvider.OtherDocumentPaymentDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Deleted");

                    b.Property<int>("OtherDocumentId");

                    b.Property<string>("Total");

                    b.HasKey("Id");

                    b.HasIndex("OtherDocumentId");

                    b.ToTable("OtherDocumentPayment");

                    b.HasData(
                        new { Id = 1, Deleted = false, OtherDocumentId = 1, Total = "150" },
                        new { Id = 2, Deleted = true, OtherDocumentId = 1, Total = "25" },
                        new { Id = 3, Deleted = false, OtherDocumentId = 2, Total = "450" },
                        new { Id = 4, Deleted = true, OtherDocumentId = 2, Total = "132" },
                        new { Id = 5, Deleted = false, OtherDocumentId = 3, Total = "444" },
                        new { Id = 6, Deleted = true, OtherDocumentId = 3, Total = "521" },
                        new { Id = 7, Deleted = false, OtherDocumentId = 4, Total = "421" },
                        new { Id = 8, Deleted = true, OtherDocumentId = 4, Total = "4444" }
                    );
                });

            modelBuilder.Entity("Infrastructure.DataProvider.AttachmentDto", b =>
                {
                    b.HasOne("Infrastructure.DataProvider.DocumentDto", "DocumentDto")
                        .WithMany("AttachmentDtos")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Infrastructure.DataProvider.OtherDocumentDto", b =>
                {
                    b.HasOne("Infrastructure.DataProvider.DocumentDto", "DocumentDto")
                        .WithOne("OtherDocumentDto")
                        .HasForeignKey("Infrastructure.DataProvider.OtherDocumentDto", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.DataProvider.OtherDocumentItemDto", b =>
                {
                    b.HasOne("Infrastructure.DataProvider.OtherDocumentDto", "OtherDocumentDto")
                        .WithMany("OtherDocumentItemDtos")
                        .HasForeignKey("OtherDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Infrastructure.DataProvider.OtherDocumentPaymentDto", b =>
                {
                    b.HasOne("Infrastructure.DataProvider.OtherDocumentDto", "OtherDocumentDto")
                        .WithMany("OtherDocumentPaymentDtos")
                        .HasForeignKey("OtherDocumentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
